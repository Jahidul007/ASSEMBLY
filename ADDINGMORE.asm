.MODEL SMALL
.STACK 100H
.DATA

CHOICE_MSG  DB 13,10,'ADDITION OR SUBTRACTION?',13,10,'$' 
FIRST_MSG   DB 13,10,'ENTER THE FIRST NUMBER:',13,10,'$'
SECOND_MSG  DB 13,10,'ENTER THE SECOND NUMBER:',13,10,'$'
RESULT_MSG  DB 13,10,'THE RESULT IS:',13,10,'$'
NEW_LINE    DB 13,10,'$'
VAL1        DB ?
NUM1        DB ?
NUM2        DB ?
NUM3        DB ?        ; PURELY A BUFFER VARIABLE 
TEN         DB 10   
T1          DB 0
T2          DB 0     
RESULT      DB 0

.CODE                   ;WHERE THE CODE IS WRITTEN
START:  

    MOV AX, @DATA           ;MOVES THE ADDRESS OF THE VARIABLES UNDER .DATA INTO AX
    MOV DS,AX           ;MOVES AX INTO DS. THE TWO LINES ALLOW YOU TO DISPLAY STRING USING THE 21H INTERRUPT SEQUENCE 9

    MOV AH,09
    MOV DX, OFFSET CHOICE_MSG
    INT 21H             ;DISPLAYS THE STRING IN CHOICE_MSG

    MOV AH,01
    INT 21H             ;COPIES A VALUE INTO THE AL, USING SUBFUNCTION 01

    CMP AL,'+'          ;COMPARES THE ENTERED VALUE IN WITH "+"
    JNE SUBTRACTION         ;IF THE ENTERD VALUE IS "+" THEN IT JUMPS TO ADDITION ELSE IT JUMPS TO SUBTRACTION

ADDITION: 

    CALL READ           ;READ THE INPUT
    CALL ENDL           ;OUTPUT NEW LINE

    MOV BL, NUM2        ;MOVE THE VALUE OF NUM 2 INTO BL

    ADD NUM1,BL         ;ADDS NUM2 AND NUM1 TO FORM THE SUM1
    MOV AL, NUM1        ;MOV NUM1 TO AL
    MOV RESULT, AL      ;STORE THE RESULT OF THE SUM IN RESULT

    CALL WRITE          ;WRITE THE OUTPUT 
    JMP EXIT

SUBTRACTION:

    CALL READ           ;READ THE INPUT
    CALL ENDL           ;OUTPUT NEW LINE

    MOV BL, NUM2        ;MOVE VALUE OF NUM2 TO BL

    SUB NUM1,BL         ;SUBTRACTS THE VALUE IN NUM2 FROM THE VALUE IN NUM1
    MOV AL, NUM1        ;MOVE RESULT TO A REGISTER
    MOV RESULT, AL      ;MOVE THE RESULT OF THE SUBTRACTION TO RESULT

    CALL WRITE          ;DISPLAY RESULT WITH WRITE PROCEDURE
    JMP EXIT


    ;-----------------------
    ;PROCEDURE DECLARATIONS: 

    PROC ENDL

        MOV AH,09
        MOV DX, OFFSET NEW_LINE
        INT 21H             ;GOES TO NEXT LINE, I.E. "ENTER"

        RET

    ENDP


    PROC READ


        MOV AH,09
        MOV DX, OFFSET FIRST_MSG
        INT 21H             ;DISPLAYS THE STRING IN FIRST_MSG

        MOV AH,01           ;READ CHAR
        INT 21H             ;COPIES A VALUE INTO THE AL, USING SUBFUNCTION 01
        SUB AL,48           ;SUBTRACTS 48 FROM THE VAULE IN THE AL
        MOV NUM1,AL         ;MOVES THE VALUE IN THE AL TO THE VARIABLE NUM1

        MOV AH,01           ;READ SECOND CHAR
        INT 21H             ;COPIES A VALUE INTO THE AL, USING SUBFUNCTION 01
        SUB AL,48           ;SUBTRACTS 48 FROM THE VALUE IN THE AL
        MOV NUM2,AL         ;MOVES THE VALUE IN THE AL TO THE VARIABLE NUM2

        MOV AL,NUM1         ;MOVES THE VALUE IN NUM1 INTO THE AL
        MUL TEN             ;MULTIPLIES THE VALUE IN THE AL BY TEN
        ADD AL,NUM2         ;ADDS THE VALUE IN NUM2 TO THE AL, TO GET THE TWO-DIGIT NUMBER
        MOV NUM1,AL         ;MOVES THE TWO DIGIT VALUE INTO

        CALL ENDL

        MOV AH,09
        MOV DX, OFFSET SECOND_MSG   ;DISPLAYS THE STRING IN SECOND_MSG
        INT 21H             

        MOV AH,01
        INT 21H             ;COPIES A VALUE INTO THE AL, USING SUBFUNCTION 01
        SUB AL,48           ;SUBTRACTS 48 FROM THE VALUE IN THE AL
        MOV NUM2,AL         ;MOVES THE NEW VALUE IN THE AL INTO THE VARIABLE NUM2

        MOV AH,01
        INT 21H             ;COPIES A VALUE INTO THE AL, USING SUBFUNCTION 01
        SUB AL,48           ;SUBTRACTS 48 FROM THE VALUE IN THE AL
        MOV NUM3,AL         ;MOVES THE NEW VALUE IN THE AL INTO THE VARIABLE NUM3

        MOV AL,NUM2         ;MOVES THE VALUE IN NUM2 INTO THE AL
        MUL TEN             ;MULTIPLIES THE VALUE IN THE AL BY TEN
        ADD AL,NUM3         ;ADDS THE VALUE IN NUM3 TO THE AL, TO GET A TWO-DIGIT NUMBER
        MOV NUM2,AL         ;MOVES THE VALUE IN THE AL INTO THE VARIABLE NUM2

        RET                 ;FIRST NUMBER IN NUM1, SECOND IN NUM2    
    ENDP


    ;THE WRITE PROCEDURE WRITES THE DECIMAL STORED IN RESULT.
    ;BY DIVIDING BY TEN IT SEPERATES THE TWO DIGITS AS QUOTIENT
    ;AND REMAINDER. THEN IT OUTPUTS THE QUOTIENT AND REMAINDER
    ;IN ASCII FORM.
    PROC WRITE
            MOV DX,OFFSET RESULT_MSG
            MOV AH,09H
            INT 21H         ;DISPLAY THE RESULT_MSG STRING

            MOV AL,RESULT   ;MOVE THE RESULT FROM ADD/SUB TO AL
            MOV AH,00       ;INITIALIZE AH
            DIV TEN         ;DIV AL BY TEN, QUOTIENT IS IN AL 
                            ;REMAINDER IS STORED IN AH.

            MOV DL,AH       ;MOVE THE REMAINDER TO DL
            MOV T2,DL       ;STORE THE REMAINDER IN T2

            MOV DL,AL       ;MOVE QUOTIENT INTO DL
            ADD DL,48       ;ADD 48 TO DL, TO CONVERT IT TO ASCII
            MOV AH,02H      ;CHAR DISPLAY INTERUPT CODE
            INT 21H         ;DISPLAY CHAR IN DL REGISTER

            MOV DL,T2       ;MOVE REMAINDER TO T2
            ADD DL,48       ;CONVERT IT TO ASCII BY ADDING 48
            MOV AH,02H      ;DISPLAY CHARACTER IN DL INTERUPT CODE
            INT 21H         ;DIPLAYS CONTENTS OF DL 

            CALL ENDL       ;OUTPUT A NEW LINE
            RET             


    ENDP


    EXIT:
    MOV AX, 4C00H               ;THIS IS JUST A FAILSAFE EXIT
    INT 21H


END